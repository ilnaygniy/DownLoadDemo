package downloaddemo.liyanying.example.com.download.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import downloaddemo.liyanying.example.com.download.dao.DownLoadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD_INFO".
*/
public class DownLoadInfoDao extends AbstractDao<DownLoadInfo, Long> {

    public static final String TABLENAME = "DOWN_LOAD_INFO";

    /**
     * Properties of entity DownLoadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Class_ID = new Property(1, String.class, "class_ID", false, "CLASS__ID");
        public final static Property Down_id = new Property(2, String.class, "down_id", false, "DOWN_ID");
        public final static Property Filename = new Property(3, String.class, "filename", false, "FILENAME");
        public final static Property TotalSize = new Property(4, Long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property CurrentSize = new Property(5, Long.class, "currentSize", false, "CURRENT_SIZE");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
    }


    public DownLoadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CLASS__ID\" TEXT," + // 1: class_ID
                "\"DOWN_ID\" TEXT," + // 2: down_id
                "\"FILENAME\" TEXT," + // 3: filename
                "\"TOTAL_SIZE\" INTEGER," + // 4: totalSize
                "\"CURRENT_SIZE\" INTEGER," + // 5: currentSize
                "\"PATH\" TEXT);"); // 6: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String class_ID = entity.getClass_ID();
        if (class_ID != null) {
            stmt.bindString(2, class_ID);
        }
 
        String down_id = entity.getDown_id();
        if (down_id != null) {
            stmt.bindString(3, down_id);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(4, filename);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(5, totalSize);
        }
 
        Long currentSize = entity.getCurrentSize();
        if (currentSize != null) {
            stmt.bindLong(6, currentSize);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String class_ID = entity.getClass_ID();
        if (class_ID != null) {
            stmt.bindString(2, class_ID);
        }
 
        String down_id = entity.getDown_id();
        if (down_id != null) {
            stmt.bindString(3, down_id);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(4, filename);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(5, totalSize);
        }
 
        Long currentSize = entity.getCurrentSize();
        if (currentSize != null) {
            stmt.bindLong(6, currentSize);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoadInfo readEntity(Cursor cursor, int offset) {
        DownLoadInfo entity = new DownLoadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // class_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // down_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filename
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // totalSize
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // currentSize
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClass_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDown_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCurrentSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
